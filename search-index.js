var searchIndex = JSON.parse('{\
"algo_rs":{"doc":"","t":[0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,0,0,0,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,12,0,0,0,0,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11],"n":["array","binary_search","hash_map","math","search","sort","stack","tree","two_pointers","shift_2d_grid","Shift2DGrid","borrow","borrow_mut","from","into","shift_grid","try_from","try_into","type_id","binary_search","first_bad_version","search_insert_position","BinarySearch","borrow","borrow_mut","from","into","search","try_from","try_into","type_id","FirstBadVersion","borrow","borrow_mut","first_bad_version","from","into","new","try_from","try_into","type_id","SearchInsertPosition","borrow","borrow_mut","from","into","search_insert","try_from","try_into","type_id","len_longest_fib_subseq","magic_dictionary","LengthOfLongestFibonacciSubsequence","borrow","borrow_mut","from","into","len_longest_fib_subseq","try_from","try_into","type_id","MagicDictionary","borrow","borrow_mut","from","into","try_from","try_into","type_id","smallest_range_1","SmallestRange1","borrow","borrow_mut","from","into","smallest_range_i","try_from","try_into","type_id","all_elements_in_two_binary_search_trees","array_nesting","minimum_genetic_mutation","pacific_atlantic_water_flow","AllElementsInTwoBinarySearchTrees","TreeNode","borrow","borrow","borrow_mut","borrow_mut","eq","fmt","from","from","get_all_elements","into","into","left","ne","new","right","try_from","try_from","try_into","try_into","type_id","type_id","val","ArrayNesting","array_nesting","borrow","borrow_mut","from","into","try_from","try_into","type_id","MinimumGeneticMutation","borrow","borrow_mut","from","into","min_mutation","try_from","try_into","type_id","PacificAtlanticWaterFlow","borrow","borrow_mut","from","into","pacific_atlantic","try_from","try_into","type_id","serialize_deserialize_bst","Codec","TreeNode","borrow","borrow","borrow_mut","borrow_mut","eq","fmt","from","from","into","into","left","ne","new","right","try_from","try_from","try_into","try_into","type_id","type_id","val","rotate_array","sort_array_by_parity","squares_of_sorted_array","subarray_product_less_than_k","RotateArray","borrow","borrow_mut","from","into","rotate","try_from","try_into","type_id","SortArrayByParity","borrow","borrow_mut","from","into","sort_array_by_parity","try_from","try_into","type_id","SquaresOfSortedArray","borrow","borrow_mut","from","into","sorted_squares","try_from","try_into","type_id","SubarrayProductLessThanK","borrow","borrow_mut","from","into","num_subarray_product_less_than_k","try_from","try_into","type_id"],"q":["algo_rs","","","","","","","","","algo_rs::array","algo_rs::array::shift_2d_grid","","","","","","","","","algo_rs::binary_search","","","algo_rs::binary_search::binary_search","","","","","","","","","algo_rs::binary_search::first_bad_version","","","","","","","","","","algo_rs::binary_search::search_insert_position","","","","","","","","","algo_rs::hash_map","","algo_rs::hash_map::len_longest_fib_subseq","","","","","","","","","algo_rs::hash_map::magic_dictionary","","","","","","","","algo_rs::math","algo_rs::math::smallest_range_1","","","","","","","","","algo_rs::search","","","","algo_rs::search::all_elements_in_two_binary_search_trees","","","","","","","","","","","","","","","","","","","","","","","","algo_rs::search::array_nesting","","","","","","","","","algo_rs::search::minimum_genetic_mutation","","","","","","","","","algo_rs::search::pacific_atlantic_water_flow","","","","","","","","","algo_rs::tree","algo_rs::tree::serialize_deserialize_bst","","","","","","","","","","","","","","","","","","","","","","","algo_rs::two_pointers","","","","algo_rs::two_pointers::rotate_array","","","","","","","","","algo_rs::two_pointers::sort_array_by_parity","","","","","","","","","algo_rs::two_pointers::squares_of_sorted_array","","","","","","","","","algo_rs::two_pointers::subarray_product_less_than_k","","","","","","","",""],"d":["","","","","","","","","","Shift 2D Grid","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Binary Search","First Bad Version","Search Insert Position","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Length of Longest Fibonacci Subsequence","Implement Magic Dictionary","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Smallest Range I","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","All Elements in Two Binary Search Trees","Array Nesting","Minimum Genetic Mutation","Pacific Atlantic Water Flow","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Serialize and Deserialize BST","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Rotate Array","Sort Array By Parity","Squares of a Sorted Array","Subarray Product Less Than K","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,0,0,0,0,16,16,16,16,16,16,16,16,0,5,5,5,5,5,5,5,5,5,0,17,17,17,17,17,17,17,17,0,0,0,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,0,0,20,20,20,20,20,20,20,20,0,0,0,0,0,0,21,6,21,6,6,6,21,6,21,21,6,6,6,6,6,21,6,21,6,21,6,6,0,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,24,0,0,0,25,14,25,14,14,14,25,14,25,14,14,14,14,14,25,14,25,14,25,14,14,0,0,0,0,0,26,26,26,26,26,26,26,26,0,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,0,29,29,29,29,29,29,29,29],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[2,[[2,[1]]]],1],[[2,[[2,[1]]]]]],[[],3],[[],3],[[],4],0,0,0,0,[[]],[[]],[[]],[[]],[[[2,[1]],1],1],[[],3],[[],3],[[],4],0,[[]],[[]],[[5,1],1],[[]],[[]],[1,5],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[[]],[[[2,[1]],1],1],[[],3],[[],3],[[],4],0,0,0,[[]],[[]],[[]],[[]],[[[2,[1]]],1],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[[]],[[],3],[[],3],[[],4],0,0,[[]],[[]],[[]],[[]],[[[2,[1]],1],1],[[],3],[[],3],[[],4],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[6,6],7],[[6,8],9],[[]],[[]],[[[12,[[11,[[10,[6]]]]]],[12,[[11,[[10,[6]]]]]]],[[2,[1]]]],[[]],[[]],0,[[6,6],7],[[1,[12,[6]],[12,[6]]],6],0,[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,[[[2,[1]]],1],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[[]],[[13,13,[2,[13]]],1],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[[]],[[[2,[[2,[1]]]]],[[2,[[2,[1]]]]]],[[],3],[[],3],[[],4],0,0,0,[[]],[[]],[[]],[[]],[[14,14],7],[[14,8],9],[[]],[[]],[[]],[[]],0,[[14,14],7],[1,14],0,[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[2,1]],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[[]],[[[2,[1]],1],1],[[],3],[[],3],[[],4]],"p":[[15,"i32"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"FirstBadVersion"],[3,"TreeNode"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"RefCell"],[3,"Rc"],[4,"Option"],[3,"String"],[3,"TreeNode"],[3,"Shift2DGrid"],[3,"BinarySearch"],[3,"SearchInsertPosition"],[3,"LengthOfLongestFibonacciSubsequence"],[3,"MagicDictionary"],[3,"SmallestRange1"],[3,"AllElementsInTwoBinarySearchTrees"],[3,"ArrayNesting"],[3,"MinimumGeneticMutation"],[3,"PacificAtlanticWaterFlow"],[3,"Codec"],[3,"RotateArray"],[3,"SortArrayByParity"],[3,"SquaresOfSortedArray"],[3,"SubarrayProductLessThanK"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
