var searchIndex = JSON.parse('{\
"algo_rs":{"doc":"","t":[0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,0,0,0,0,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11],"n":["binary_search","math","search","sort","stack","two_pointers","binary_search","first_bad_version","search_insert_position","BinarySearch","borrow","borrow_mut","from","into","search","try_from","try_into","type_id","FirstBadVersion","borrow","borrow_mut","first_bad_version","from","into","new","try_from","try_into","type_id","SearchInsertPosition","borrow","borrow_mut","from","into","search_insert","try_from","try_into","type_id","smallest_range_1","SmallestRange1","borrow","borrow_mut","from","into","smallest_range_i","try_from","try_into","type_id","all_elements_in_two_binary_search_trees","minimum_genetic_mutation","pacific_atlantic_water_flow","AllElementsInTwoBinarySearchTrees","TreeNode","borrow","borrow","borrow_mut","borrow_mut","eq","fmt","from","from","get_all_elements","into","into","left","ne","new","right","try_from","try_from","try_into","try_into","type_id","type_id","val","MinimumGeneticMutation","borrow","borrow_mut","from","into","min_mutation","try_from","try_into","type_id","PacificAtlanticWaterFlow","borrow","borrow_mut","from","into","pacific_atlantic","try_from","try_into","type_id","rotate_array","sort_array_by_parity","squares_of_sorted_array","subarray_product_less_than_k","RotateArray","borrow","borrow_mut","from","into","rotate","try_from","try_into","type_id","SortArrayByParity","borrow","borrow_mut","from","into","sort_array_by_parity","try_from","try_into","type_id","SquaresOfSortedArray","borrow","borrow_mut","from","into","sorted_squares","try_from","try_into","type_id","SubarrayProductLessThanK","borrow","borrow_mut","from","into","num_subarray_product_less_than_k","try_from","try_into","type_id"],"q":["algo_rs","","","","","","algo_rs::binary_search","","","algo_rs::binary_search::binary_search","","","","","","","","","algo_rs::binary_search::first_bad_version","","","","","","","","","","algo_rs::binary_search::search_insert_position","","","","","","","","","algo_rs::math","algo_rs::math::smallest_range_1","","","","","","","","","algo_rs::search","","","algo_rs::search::all_elements_in_two_binary_search_trees","","","","","","","","","","","","","","","","","","","","","","","","algo_rs::search::minimum_genetic_mutation","","","","","","","","","algo_rs::search::pacific_atlantic_water_flow","","","","","","","","","algo_rs::two_pointers","","","","algo_rs::two_pointers::rotate_array","","","","","","","","","algo_rs::two_pointers::sort_array_by_parity","","","","","","","","","algo_rs::two_pointers::squares_of_sorted_array","","","","","","","","","algo_rs::two_pointers::subarray_product_less_than_k","","","","","","","",""],"d":["","","","","","","Binary Search","First Bad Version","Search Insert Position","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Smallest Range I","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","All Elements in Two Binary Search Trees","Minimum Genetic Mutation","Pacific Atlantic Water Flow","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Rotate Array","Sort Array By Parity","Squares of a Sorted Array","Subarray Product Less Than K","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,0,0,4,4,4,4,4,4,4,4,0,0,0,0,0,5,6,5,6,6,6,5,6,5,5,6,6,6,6,6,5,6,5,6,5,6,6,0,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,0,0,0,0,0,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12],"f":[null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["vec",3,[["i32",0]]],["i32",0]],["i32",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["i32",0]],["i32",0]],[[]],[[]],[[["i32",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["vec",3,[["i32",0]]],["i32",0]],["i32",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["vec",3,[["i32",0]]],["i32",0]],["i32",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["treenode",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["option",4,[["rc",3,[["refcell",3,[["treenode",3]]]]]]],["option",4,[["rc",3,[["refcell",3,[["treenode",3]]]]]]]],["vec",3,[["i32",0]]]],[[]],[[]],null,[[["",0],["treenode",3]],["bool",0]],[[["i32",0],["option",4,[["treenode",3]]],["option",4,[["treenode",3]]]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["string",3],["string",3],["vec",3,[["string",3]]]],["i32",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["vec",3,[["vec",3,[["i32",0]]]]]],["vec",3,[["vec",3,[["i32",0]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["vec",3],["i32",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["vec",3,[["i32",0]]]],["vec",3,[["i32",0]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["vec",3,[["i32",0]]]],["vec",3,[["i32",0]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["vec",3,[["i32",0]]],["i32",0]],["i32",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"BinarySearch"],[3,"FirstBadVersion"],[3,"SearchInsertPosition"],[3,"SmallestRange1"],[3,"AllElementsInTwoBinarySearchTrees"],[3,"TreeNode"],[3,"MinimumGeneticMutation"],[3,"PacificAtlanticWaterFlow"],[3,"RotateArray"],[3,"SortArrayByParity"],[3,"SquaresOfSortedArray"],[3,"SubarrayProductLessThanK"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};